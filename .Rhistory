print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
scale_fill_gradientn(colours=c("white","black"))+
xlab("RUN ID")+
ylab("Peptide")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
missingdatamap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
scale_fill_gradientn(colours=c("white","black"))+
xlab("RUN ID")+
ylab("Peptide")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
scale_fill_gradientn(colours=c("white","lightblue"))+
xlab("RUN ID")+
ylab("Peptide")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata<-DataProcess(prodata)
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
scale_fill_gradientn(colours=c("lightblue","white"))+
xlab("RUN ID")+
ylab("Peptide")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
scale_fill_gradientn(colours=c("lightblue","white"))+
xlab("RUN ID")+
ylab("Peptide")+
scale_fill_continuous("Number of missing metrics")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("RUN ID")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics", colours=c("lightblue","white") )+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("RUN ID")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics")+
scale_fill_gradientn(colours=c("lightblue","white"))+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("RUN ID")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics", low = "lightblue", high = "white")+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=File_ID, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("RUN ID")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics", low = "lightblue", high = "white")+
theme_bw()+
theme(legend.position="bottom")+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(prodata)
#setwd("./MSstatsQC")
document()
library(MSstatsQC)
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
document()
library(MSstatsQC)
data <- DataProcess(S9Site54)
MissingDataMap(data)
data
library(MSstatsQC)
XmRChart( data, peptide = "DGGIDPLVR", L = 1, U = 20, metric = "RetentionTime", normalization = FALSE, ytitle = "X Chart : retention time", type = "mean", selectMean = NULL ,selectSD = NULL )
View(data)
XmRChart( data, peptide = "DGGIDPLVR", L = 1, U = 20, metric = "missing", normalization = FALSE, ytitle = "X Chart : retention time", type = "mean", selectMean = NULL ,selectSD = NULL )
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
setwd("/Users/ed/Dropbox/2. MSstatsQC 2.0 Paper/4. DATA")
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
data<-DataProcess(prodata)
data
XmRChart( data, peptide = "ECCHGDLLECADDR", L = 1, U = 20, metric = "missing", normalization = FALSE, ytitle = "X Chart : retention time", type = "mean", selectMean = NULL ,selectSD = NULL )
XmRChart( data, peptide = "EACFAVEGPK", L = 1, U = 20, metric = "missing", normalization = FALSE, ytitle = "X Chart : retention time", type = "mean", selectMean = NULL ,selectSD = NULL )
XmRChart( data, peptide = "EACFAVEGPK", L = 1, U = 20, metric = "missing", normalization = FALSE, ytitle = "X Chart : number of missing measurements", type = "mean", selectMean = NULL ,selectSD = NULL )
MissingDataMap(data)
MSstatsQCgui::RunMSstatsQC()
library("MSstatsQCgui", lib.loc="~/Library/R/3.5/library")
MSstatsQCgui::RunMSstatsQC()
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
View(prodata)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=AcquiredTime, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Run ID")+
ylab("Retention Time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=14940), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
ggplot(data=prodata, aes(x=AcquiredTime, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Run ID")+
ylab("Retention Time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=14940), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=14940), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata$Time<-as.numeric(prodata$Time)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata$Time<-as.factor(prodata$Time)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata$Time<-as.numeric(prodata$Time)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata$AcquiredTime<-as.numeric(prodata$AcquiredTime)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=AcquiredTime, y=RetentionTime))+facet_wrap(~Precursor)+geom_point()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
prodata$AcquiredTime<-as.numeric(prodata$AcquiredTime)
prodata$RetentionTime<-prodata$RetentionTime/10
prodata$GuideSetMean<-prodata$GuideSetMean/10
ggplot(data=prodata, aes(x=AcquiredTime, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_QuiC_DIA.csv')
Time<-rep(1:48, 11)
ggplot(data=prodata, aes(x=Time, y=DeltaRetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Time")+
ylab("Delta retention time")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_QuiC_DIA.csv')
Time<-rep(1:48, 11)
ggplot(data=prodata, aes(x=Time, y=DeltaRetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Time")+
ylab("Delta retention time")+
geom_vline(aes(xintercept=24), color="blue", linetype="dashed", size=0.5)+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_qtrap_QCloud_SRM.csv')
table(prodata$Precursor)
prodata <- read.csv('test_qtrap_QCloud_SRM.csv')
Time<-rep(1:43, 11)
ggplot(data=prodata, aes(x=File_ID, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
prodata <- read.csv('test_qtrap_QCloud_SRM.csv')
Time<-rep(1:43, 11)
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
Time<-rep(1:43, 9)
ggplot(data=prodata, aes(x=Time, y=RetentionTime))+facet_wrap(~Precursor)+geom_line()+
xlab("Time")+
ylab("Retention time(min)")+
theme_bw()+
geom_hline(data=prodata, aes(yintercept=GuideSetMean), color="red", size=0.5)+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), text = element_text(size=8), axis.text.x = element_text(angle=45, hjust=1))
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
data$File_ID<-as.factor(data$File_ID)
ggplot(data, aes(x=AcquiredTime, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("Time")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics", low = "lightblue", high = "white")+
theme_bw()+
theme(legend.position="bottom")+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
}
MissingDataMap(data)
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
View(prodata)
data<-DataProcess(prodata)
MissingDataMap(data)
table(data$Precursor)
MSstatsQCgui
MSstatsQCgui::RunMSstatsQC()
library(MSstatsQC)
prodata <- read.csv('test_lumos_QCloud_DDA.csv')
View(prodata)
View(prodata)
View(prodata)
library(MSstatsQC)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
document()
library("MSstatsQC", lib.loc="~/Library/R/3.5/library")
library(MSstatsQC)
MissingDataMap(QuiCDIA)
RadarPlot(data = QuiCDIA, L = 1, U = 20, method = "XmR")
RiverPlot(data = QuiCDIA, L = 1, U = 20, method = "XmR")
MissingDataMap(QCloudDDA)
RiverPlot(data = QCloudDDA, L = 1, U = 10, method = "XmR")
RadarPlot(data = QCloudDDA, L = 1, U = 10, method = "XmR")
QCloudDDA<-read.csv('test_lumos_QCloud_DDA_vignette.csv')
setwd("/Users/ed/Dropbox/2. MSstatsQC 2.0 Paper/4. DATA")
QCloudDDA<-read.csv('test_lumos_QCloud_DDA_vignette.csv')
QuiCDIA <- read.csv('test_QuiC_DIA_vignette.csv')
QCloudSRM<-read.csv('test_qtrap_QCloud_SRM_vignette.csv')
getwd()
setwd("./MSstatsQC")
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
setwd("/Users/ed/Dropbox/2. MSstatsQC 2.0 Paper/4. DATA")
save(QCloudDDA, file = "QCloudDDA.RData")
save(QCloudSRM, file = "QCloudSRM.RData")
save(QuiCDIA, file = "QuiCDIA.RData")
library(MSstatsQC)
MissingDataMap(QCloudDDA)
QCloudDDA
QCloudDDA<-DataProcess(QCloudDDA)
MissingDataMap(QCloudDDA)
RiverPlot(data = QCloudDDA, L = 1, U = 10, method = "XmR")
View(QCloudDDA)
RiverPlot(data = DataProcess(QCloudDDA), L = 1, U = 10, method = "XmR")
QCloudDDA<-DataProcess(QCloudDDA)
library(MSstatsQC)
QCloudDDA<-DataProcess(QCloudDDA)
MissingDataMap(QCloudDDA)
MissingDataMap(QCloudDDA)
QCloudDDA<-read.csv('test_lumos_QCloud_DDA_vignette.csv')
MissingDataMap(QCloudDDA)
QCloudDDA
QCloudDDA<-read.csv('test_lumos_QCloud_DDA_vignette.csv')
View(QCloudDDA)
library(MSstatsQC)
QCloudDDA<-DataProcess(QCloudDDA)
MissingDataMap(QCloudDDA)
RiverPlot(data = QCloudDDA, L = 1, U = 10, method = "XmR")
QCloudDDA
MissingDataMap(QCloudDDA)
QCloudDDA
MissingDataMap(QCloudDDA)
MissingDataMap <- function(data){
if (sum(data$missing)==0) {
print("No missing values!")
}
else {
ggplot(data, aes(x=AcquiredTime, y=Precursor))+geom_raster(aes(fill = missing))+
xlab("Time")+
ylab("Peptide")+
scale_fill_continuous("# of missing metrics", low = "lightblue", high = "white")+
theme_bw()+
theme(legend.position="bottom")+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
}
return(data)
}
MissingDataMap(QCloudDDA)
library(MSstatsQC)
MissingDataMap(QCloudDDA)
QCloudDDA<-read.csv('test_lumos_QCloud_DDA_vignette.csv')
QCloudSRM
MissingDataMap(QCloudDDA)
QCloudDDA<-DataProcess(QCloudDDA)
MissingDataMap(QCloudDDA)
RiverPlot(data = QCloudDDA, L = 1, U = 10, method = "XmR")
QCloudDDA
View(QCloudDDA)
QCloudDDA
QCloudDDA<-DataProcess(QCloudDDA)
library(MSstatsQC)
QCloudDDA
MissingDataMap(QCloudDDA)
library(MSstatsQC)
library(MSstatsQC)
MissingDataMap(QCloudDDA)
MissingDataMap(QCloudSRM)
library(MSstatsQC)
MissingDataMap(QCloudSRM)
library(MSstatsQC)
MissingDataMap(QCloudSRM)
library(MSstatsQC)
MissingDataMap(QCloudSRM)
MissingDataMap(S9Site54)
DataProcess(S9Site54)
library(MSstatsQC)
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
document()
document()
setwd("./MSstatsQC")
setwd("/Users/ed/GitHub")
setwd("./MSstatsQCgui")
setwd("./MSstatsQC")
document()
setwd("/Users/ed/GitHub")
setwd("./MSstatsQCgui")
setwd("./MSstatsQC")
document()
setwd("/Users/ed/GitHub")
setwd("./MSstatsQCgui")
setwd("./MSstatsQC")
document()
setwd("/Users/ed/GitHub")
setwd("./MSstatsQCgui")
setwd("./MSstatsQC")
document()
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
document()
setwd("/Users/ed/GitHub")
setwd("./MSstatsQC")
document()
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
setwd("./MSstatsQC")
document()
